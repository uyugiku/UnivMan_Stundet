// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.univman.information;

import com.univman.information.Information;
import com.univman.information.InformationDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect InformationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InformationDataOnDemand: @Component;
    
    private Random InformationDataOnDemand.rnd = new SecureRandom();
    
    private List<Information> InformationDataOnDemand.data;
    
    public Information InformationDataOnDemand.getNewTransientInformation(int index) {
        Information obj = new Information();
        setBody(obj, index);
        setInformationDate(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void InformationDataOnDemand.setBody(Information obj, int index) {
        String body = "body_" + index;
        obj.setBody(body);
    }
    
    public void InformationDataOnDemand.setInformationDate(Information obj, int index) {
        Date informationDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setInformationDate(informationDate);
    }
    
    public void InformationDataOnDemand.setTitle(Information obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public Information InformationDataOnDemand.getSpecificInformation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Information obj = data.get(index);
        Long id = obj.getId();
        return Information.findInformation(id);
    }
    
    public Information InformationDataOnDemand.getRandomInformation() {
        init();
        Information obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Information.findInformation(id);
    }
    
    public boolean InformationDataOnDemand.modifyInformation(Information obj) {
        return false;
    }
    
    public void InformationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Information.findInformationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Information' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Information>();
        for (int i = 0; i < 10; i++) {
            Information obj = getNewTransientInformation(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
